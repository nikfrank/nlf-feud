{"version":3,"sources":["../../../client/components/util/util.service.js"],"names":["UtilService","$window","Util","safeCb","cb","angular","isFunction","noop","urlParse","url","a","document","createElement","href","host","isSameOrigin","origins","concat","map","push","location","filter","o","hostname","port","protocol","length","module","factory"],"mappings":"AAAA;;AAEA,CAAC,YAAW;;AAEZ;;;AAGA,WAASA,WAAT,CAAqBC,OAArB,EAA8B;AAC5B,QAAIC,OAAO;AACT;;;;;;AAMAC,YAPS,kBAOFC,EAPE,EAOE;AACT,eAAQC,QAAQC,UAAR,CAAmBF,EAAnB,CAAD,GAA2BA,EAA3B,GAAgCC,QAAQE,IAA/C;AACD,OATQ;;;AAWT;;;;;;AAMAC,cAjBS,oBAiBAC,GAjBA,EAiBK;AACZ,YAAIC,IAAIC,SAASC,aAAT,CAAuB,GAAvB,CAAR;AACAF,UAAEG,IAAF,GAASJ,GAAT;;AAEA;AACA,YAAIC,EAAEI,IAAF,KAAW,EAAf,EAAmB;AACjBJ,YAAEG,IAAF,GAASH,EAAEG,IAAX;AACD;;AAED,eAAOH,CAAP;AACD,OA3BQ;;;AA6BT;;;;;;;AAOAK,kBApCS,wBAoCIN,GApCJ,EAoCSO,OApCT,EAoCkB;AACzBP,cAAMP,KAAKM,QAAL,CAAcC,GAAd,CAAN;AACAO,kBAAWA,WAAW,GAAGC,MAAH,CAAUD,OAAV,CAAZ,IAAmC,EAA7C;AACAA,kBAAUA,QAAQE,GAAR,CAAYhB,KAAKM,QAAjB,CAAV;AACAQ,gBAAQG,IAAR,CAAalB,QAAQmB,QAArB;AACAJ,kBAAUA,QAAQK,MAAR,CAAe,UAASC,CAAT,EAAY;AACnC,iBAAOb,IAAIc,QAAJ,KAAiBD,EAAEC,QAAnB,IACLd,IAAIe,IAAJ,KAAaF,EAAEE,IADV,IAELf,IAAIgB,QAAJ,KAAiBH,EAAEG,QAFrB;AAGD,SAJS,CAAV;AAKA,eAAQT,QAAQU,MAAR,IAAkB,CAA1B;AACD;AA/CQ,KAAX;;AAkDA,WAAOxB,IAAP;AACD;;AAEDG,UAAQsB,MAAR,CAAe,cAAf,EACGC,OADH,CACW,MADX,EACmB5B,WADnB;AAGC,CA9DD","file":"util.service.js","sourcesContent":["'use strict';\n\n(function() {\n\n/**\n * The Util service is for thin, globally reusable, utility functions\n */\nfunction UtilService($window) {\n  var Util = {\n    /**\n     * Return a callback or noop function\n     *\n     * @param  {Function|*} cb - a 'potential' function\n     * @return {Function}\n     */\n    safeCb(cb) {\n      return (angular.isFunction(cb)) ? cb : angular.noop;\n    },\n\n    /**\n     * Parse a given url with the use of an anchor element\n     *\n     * @param  {String} url - the url to parse\n     * @return {Object}     - the parsed url, anchor element\n     */\n    urlParse(url) {\n      var a = document.createElement('a');\n      a.href = url;\n\n      // Special treatment for IE, see http://stackoverflow.com/a/13405933 for details\n      if (a.host === '') {\n        a.href = a.href;\n      }\n\n      return a;\n    },\n\n    /**\n     * Test whether or not a given url is same origin\n     *\n     * @param  {String}           url       - url to test\n     * @param  {String|String[]}  [origins] - additional origins to test against\n     * @return {Boolean}                    - true if url is same origin\n     */\n    isSameOrigin(url, origins) {\n      url = Util.urlParse(url);\n      origins = (origins && [].concat(origins)) || [];\n      origins = origins.map(Util.urlParse);\n      origins.push($window.location);\n      origins = origins.filter(function(o) {\n        return url.hostname === o.hostname &&\n          url.port === o.port &&\n          url.protocol === o.protocol;\n      });\n      return (origins.length >= 1);\n    }\n  };\n\n  return Util;\n}\n\nangular.module('feudApp.util')\n  .factory('Util', UtilService);\n\n})();\n"]}